" =======================================================
" IdeaVim Configuration - AstroVim Inspired Base Setup
" File: ~/.ideavimrc
" Version: Corrected Mappings & Comments
" =======================================================

" --- Core Setup & Essential Vim Features ---

" Set compatible mode off (crucial for modern Vim features)
set nocompatible

" Enable filetype detection and filetype-specific indenting
filetype plugin indent on

" Show line numbers
set number
" Show relative line numbers (great for motions like 5k)
set relativenumber

" Highlight the current line
set cursorline

" Show invisible characters (spaces, tabs, newlines)
set list
" Customize how invisible characters are displayed
set listchars=tab:▸\ ,eol:¬,space:·,trail:•,extends:>,precedes:<

" Case-insensitive search
set ignorecase
" Case-sensitive search if uppercase letters are used in the search term
set smartcase

" Highlight search matches as you type
set incsearch
" Highlight all search matches
set hlsearch

" Always show the status line (e.g., current mode)
set laststatus=2

" Auto-indent new lines
set autoindent

" Smart backspacing (allows backspacing over autoindent, etc.)
set smartindent

" Use spaces instead of tabs
set expandtab

" Number of spaces a tab counts for
set tabstop=4
" Number of spaces used for each step of (auto)indent
set shiftwidth=4

" Persistent undo (undo even after closing/reopening files)
set undofile
set undodir=~/.ideavim_undo

" Set leaderhkey to Spacebar (common in Neovim/AstroVim)
let mapleader = " "

" --- IdeaVim Extensions (Built-in "plugins" / functionality) ---
" These enable IdeaVim's enhanced features similar to popular Vim plugins.

" Surround.vim like functionality (ds, cs, ys)
set ideavim_surround

" Commentary.vim like functionality (gc, gcc, gcap)
set ideavim_commentary

" ReplaceWithRegister (gr)
set ideavim_replace_with_register

" AceJump (similar to EasyMotion for quick jumps)
set ideavim_acejump

" Vim-Multiple-Cursors (integrates with JetBrains' multiple cursors)
set ideavim_multiple_cursors

" Text-Object-VSCode (adds VS Code-like text objects if useful for your workflow)
" Consider if you need this; it can sometimes add unexpected behaviors.
" set ideavim_text_object_vscode

" --- AstroVim-like Mappings (JetBrains Actions via IdeaVim) ---
" Mappings use :<Action>(ActionName)<CR> to correctly execute JetBrains actions.

" File Management
" Fuzzy find files, symbols, and IDE actions (Search Everywhere)
map <leader>f :<Action>(SearchEverywhere)<CR>
" Open Recent Files list
map <leader>r :<Action>(RecentFiles)<CR>
" Toggle Project Tool Window (file tree)
map <leader>e :<Action>(ActivateProjectToolWindow)<CR>
" Close current editor tab/file
map <leader>q :<Action>(CloseContent)<CR>

" Tab/Buffer Navigation (JetBrains editor tabs)
" Go to the next tab
map <leader>tn :tabnext<CR>
" Go to the previous tab
map <leader>tp :tabprevious<CR>

" Search & Replace
" Find/Replace within the current file
map <leader>fr :<Action>(Replace)<CR>
" Find in Project/Paths (global search)
map <leader>ff :<Action>(FindInPath)<CR>

" Code Navigation & Refactoring
" Go to Definition/Declaration (like LSP `gd`)
nmap gd :<Action>(GotoDeclaration)<CR>
" Find Usages (like LSP `references`)
nmap gu :<Action>(FindUsages)<CR>
" Go to Implementation
map <leader>gi :<Action>(GotoImplementation)<CR>
" Rename Element
map <leader>rn :<Action>(RenameElement)<CR>
" Reformat Code (JetBrains' powerful formatter)
map <leader>fm :<Action>(ReformatCode)<CR>
" Show Context Actions / Quick Fixes (like LSP code actions)
map <leader>ca :<Action>(ShowIntentionActions)<CR>

" Errors & Warnings Navigation
" Go to the next error/warning
map <leader>ne :<Action>(NextError)<CR>
" Go to the previous error/warning
map <leader>pe :<Action>(PreviousError)<CR>

" Bookmarks (JetBrains' powerful way to mark locations)
" Toggle Bookmark on current line
map <leader>bm :<Action>(ToggleBookmark)<CR>
" Show all Bookmarks
map <leader>bl :<Action>(ShowBookmarks)<CR>

" Terminal Integration
" Open the integrated terminal (assuming 'Terminal' is an external tool)
" Note: The exact action name might vary if you customized your External Tools.
map <leader>t :<Action>(Tool_External Tools_Terminal)<CR>
" Activate/Toggle the Terminal Tool Window
map <leader>tt :<Action>(ActivateTerminalToolWindow)<CR>

" Line Commenting
" Comment/uncomment line(s) in Visual mode
vmap <leader>c :<Action>(CommentByLineComment)<CR>
" Comment/uncomment current line in Normal mode
nmap <leader>c :<Action>(CommentByLineComment)<CR>

" --- Custom Commands (IdeaVim specific) ---

" Example custom command: Toggle relative line numbers
command! ToggleRelativeNumber set relativenumber!
" Map it to <leader>nr
map <leader>nr :ToggleRelativeNumber<CR>